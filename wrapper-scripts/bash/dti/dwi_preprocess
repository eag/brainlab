#!/bin/bash

#===============================================================================
### CONFIGURATION
#===============================================================================

SUB_ID="sub-OND01BYC1006-sess-BL"
IN_DIR="${HOME}/tmp/test_datasets_dti/organized"
OUT_DIR="${HOME}/tmp/test_datasets_dti/derivatives/dti"
DWI_PFX="DTI"
THREADS=3

QC_DIR="${OUT_DIR}/qc"
LOG_DIR="${OUT_DIR}/logs"
LOG_FN=${LOG_DIR}/${SUB_ID}_dwi_preprocess.log


#TODO: remove
#export ANTSPATH=${HOME}/work/code/external-tools/ants/build/ANTS-build/Examples
#export PATH=${PATH}:${ANTSPATH}

#-------------------------------------------------------------------------------
### VARIABLES 
#-------------------------------------------------------------------------------

### input variables, autofilled later ###
PRIMARY_DTI_NII=""
RPE_B0_NII=""
RPE_DWI_NII=""
RPE_BVEC=""
RPE_BVAL=""
PRIMARY_DTI_BVAL=""
PRIMARY_DTI_BVEC=""
PRIMARY_DTI_JSON=""
RPE_JSON=""
SLICE_OR=""

### output variables ###
OUT_BASE_DIR="${OUT_DIR}/${SUB_ID}"

#-------------------------------------------------------------------------------
### HELPER FUNCTIONS
#-------------------------------------------------------------------------------

function log() 
{ 
  echo "[$(date '+%F %T')] $*" | tee -a "${LOG_FN}"; 
}

function setup_environment
{
  if [[ ! -d "${IN_DIR}/${SUB_ID}" ]]; then
    echo "ERROR: Input directory ${IN_DIR}/${SUB_ID} does not exist"
    exit 1
  fi
}

run_if_missing() 
{
  local outfile="$1"
  shift
  if [[ ! -f "${outfile}" ]]; then
    log "Running: $*"
    "$@"
  else
    log "$(basename "${outfile}") already exists, skipping"
  fi
}

run_if_exists() 
{
  local outfile="$1"
  shift
  if [[ -f "${outfile}" ]]; then
    log "Running: $*"
    "$@"
  fi
}

#-------------------------------------------------------------------------------
### PROCESSING FUNCTIONS
#-------------------------------------------------------------------------------

detect_dti_files() 
{
  pushd "${IN_DIR}/${SUB_ID}" 
  
  for nii in ${DWI_PFX}_*.nii.gz; do
    base="${nii%.nii.gz}"
    bval="${base}.bval"
    bvec="${base}.bvec"
    json="${base}.json"

    if [[ -f "${nii}" && -f "${bval}" && -f "${bvec}" && -f "${json}" ]]; then
      if [[ -z "${PRIMARY_DTI_NII}" ]]; then
        PRIMARY_DTI_NII="${nii}"
        PRIMARY_DTI_BVAL="${bval}"
        PRIMARY_DTI_BVEC="${bvec}"
        PRIMARY_DTI_JSON="${json}"
      else
        RPE_DWI_NII="${nii}"
        RPE_JSON="${json}"
        RPE_BVAL="${bval}"
        RPE_BVEC="${bvec}"
      fi
    elif [[ -f "${nii}" && -f "${json}" && ! -f "${bval}" && ! -f "${bvec}" ]]; then
      RPE_B0_NII="${nii}"
      RPE_JSON="${json}"
    fi
  done

  if [[ -n "${PRIMARY_DTI_JSON}" && -n "${RPE_JSON}" ]]; then
    pe_primary=$(jq -r '.PhaseEncodingDirection' "${PRIMARY_DTI_JSON}")
    pe_rpe=$(jq -r '.PhaseEncodingDirection' "${RPE_JSON}")

    if [[ "${pe_primary}" == "j" && "${pe_rpe}" == "j-" ]]; then
      tmp="${PRIMARY_DTI_NII}"
      PRIMARY_DTI_NII="${RPE_DWI_NII}"
      RPE_DWI_NII="${tmp}"

      tmp="${PRIMARY_DTI_BVAL}"
      PRIMARY_DTI_BVAL="${RPE_DWI_NII%.nii.gz}.bval"
      tmp="${PRIMARY_DTI_BVEC}"
      PRIMARY_DTI_BVEC="${RPE_DWI_NII%.nii.gz}.bvec"
      tmp="${PRIMARY_DTI_JSON}"
      PRIMARY_DTI_JSON="${RPE_JSON}"
      RPE_JSON="${tmp}"
    fi
  fi

  popd


  if [[ -z "${PRIMARY_DTI_NII}" ]]; then
    log "Primary DTI NII: $(basename "${PRIMARY_DTI_NII}") not found... stopping"
    exit 1
  fi

  PRIMARY_DTI_NII="${IN_DIR}/${SUB_ID}/${PRIMARY_DTI_NII}"
  PRIMARY_DTI_BVAL="${IN_DIR}/${SUB_ID}/${PRIMARY_DTI_BVAL}"
  PRIMARY_DTI_BVEC="${IN_DIR}/${SUB_ID}/${PRIMARY_DTI_BVEC}"
  PRIMARY_DTI_JSON="${IN_DIR}/${SUB_ID}/${PRIMARY_DTI_JSON}"
  [[ -n "${RPE_B0_NII}" ]] && RPE_B0_NII="${IN_DIR}/${SUB_ID}/${RPE_B0_NII}"
  [[ -n "${RPE_DWI_NII}" ]] && RPE_DWI_NII="${IN_DIR}/${SUB_ID}/${RPE_DWI_NII}"
  [[ -n "${RPE_JSON}" ]] && RPE_JSON="${IN_DIR}/${SUB_ID}/${RPE_JSON}"

}


verify_minimum_required_inputs()
{
  log "PRIMARY_DTI_NII : $(basename "${PRIMARY_DTI_NII:-}")"
  log "PRIMARY_DTI_BVAL: $(basename "${PRIMARY_DTI_BVAL:-}")"
  log "PRIMARY_DTI_BVEC: $(basename "${PRIMARY_DTI_BVEC:-}")"
  log "PRIMARY_DTI_JSON: $(basename "${PRIMARY_DTI_JSON:-}")"
  log "RPE_B0_NII     : $(basename "${RPE_B0_NII:-}")"
  log "RPE_DWI_NII    : $(basename "${RPE_DWI_NII:-}")"
  log "RPE_JSON       : $(basename "${RPE_JSON:-}")"
  log "RPE_BVAL      : $(basename "${RPE_BVAL:-}")"
  log "RPE_BVEC      : $(basename "${RPE_BVEC:-}")"


  if [[ -z "${PRIMARY_DTI_NII}" || -z "${PRIMARY_DTI_BVAL}" || \
        -z "${PRIMARY_DTI_BVEC}" || -z "${PRIMARY_DTI_JSON}" ]]; then
    log "ERROR: Missing primary DTI files"
    exit 1
  fi
}

detect_slice_orientation_from_json() 
{
  local json_file="$1"

  if [[ ! -f "${json_file}" ]]; then
    return
  fi

  local vals
  vals=($(jq -r '.ImageOrientationPatientDICOM[]?' "${json_file}"))

  if [[ "${#vals[@]}" -ne 6 ]]; then
    return
  fi

  local Xx="${vals[0]}" Xy="${vals[1]}" Xz="${vals[2]}"
  local Yx="${vals[3]}" Yy="${vals[4]}" Yz="${vals[5]}"

  local Sx Sy Sz
  Sx=$(echo "${Xy} * ${Yz} - ${Xz} * ${Yy}" | bc -l)
  Sy=$(echo "${Xz} * ${Yx} - ${Xx} * ${Yz}" | bc -l)
  Sz=$(echo "${Xx} * ${Yy} - ${Xy} * ${Yx}" | bc -l)

  local abs_Sx abs_Sy abs_Sz
  abs_Sx=$(echo "${Sx#-}" | bc -l)
  abs_Sy=$(echo "${Sy#-}" | bc -l)
  abs_Sz=$(echo "${Sz#-}" | bc -l)

  if (( $(echo "${abs_Sz} >= ${abs_Sx} && ${abs_Sz} >= ${abs_Sy}" | bc -l) )); then
    SLICE_OR="0,1"  # axial
  elif (( $(echo "${abs_Sy} >= ${abs_Sx} && ${abs_Sy} >= ${abs_Sz}" | bc -l) )); then
    SLICE_OR="0,2"  # coronal
  else
    SLICE_OR="1,2" # sagittal
  fi
  log "Slice orientation detected: ${SLICE_OR}"

  #log warning if not axial
  if [[ "${SLICE_OR}" != "0,1" ]]; then
    log "WARNING: Slice orientation is not axial (0,1). Detected: ${SLICE_OR}"
  fi

}

#-------------------------------------------------------------------------------
### PREPROCESSING FUNCTIONS
# - pipe functions work with pre-structured filenames
# - run functions serve pipe functions with filenames as arguments
#-------------------------------------------------------------------------------


pipe_mrconvert()
{
  run_if_missing "${OUT_BASE_DIR}/dwi.mif" \
    mrconvert ${PRIMARY_DTI_NII} "${OUT_BASE_DIR}/dwi.mif" \
      -fslgrad ${PRIMARY_DTI_BVEC} ${PRIMARY_DTI_BVAL} \
      -json_import ${PRIMARY_DTI_JSON} \
      -nthreads "${THREADS}"

  if [[ ! -z "${RPE_B0_NII}" ]]; then
    run_if_missing "${OUT_BASE_DIR}/rpe_b0_dwi.mif" \
      mrconvert "${RPE_B0_NII}" "${OUT_BASE_DIR}/rpe_b0_dwi.mif" \
        -json_import "${RPE_JSON}" \
        -nthreads "${THREADS}"
  fi

  if [[ ! -z "${RPE_DWI_NII}" ]]; then
    run_if_missing "${OUT_BASE_DIR}/rpe_dwi.mif" \
      mrconvert ${RPE_DTI_NII} "${OUT_BASE_DIR}/rpe_dwi.mif" \
        -fslgrad ${RPE_BVEC} ${RPE_BVAL} \
        -json_import ${RPE_JSON} \
        -nthreads "${THREADS}"
  fi
}

run_dwidenoise() 
{
  local input="$1"
  local output="$2"
  run_if_missing "${output}" \
    dwidenoise "${input}" "${output}" -nthreads "${THREADS}"
}

run_degibbs() 
{
  local input="$1"
  local output="$2"
  detect_slice_orientation_from_json "${PRIMARY_DTI_JSON}"
  
  if [[ -z "${SLICE_OR}" ]]; then
    log "Slice orientation not detected, using default (0,1)"
    SLICE_OR="0,1"
  fi
  
  run_if_missing "${output}" \
    mrdegibbs "${input}" "${output}" -nthreads "${THREADS}" -axes "${SLICE_OR}"
}




run_qc_residual() 
{
  local original=$1
  local processed=$2
  local output=$3
  local png_pfx=$4

  ### generate residual image ###
  run_if_missing ${output} \
    mrcalc "${original}" "${processed}" -subtract ${output} -force -nthreads "${THREADS}"

  ### need xvfb for mrview screenshot if on CC cluster ###
  local gui_runner=""
  if [[ -n "${CC_CLUSTER}" ]]; then
    gui_runner="run-xvfb"
  fi

  ### make certain output file exists otherwise mrview command will hang ###
  if [[ ! -f "${output}" ]]; then
    echo "Error: File ${output} not found. Skipping mrview."
    exit 1
  fi

  ### mrview must be run within the output directory to capture images ###
  pushd "${output_dir}" > /dev/null

  ${gui_runner} mrview ${output} \
    -mode 2 \
    -capture.prefix ${png_pfx}_ \
    -capture.folder ${QC_DIR} \
    -capture.grab \
    -exit

  popd > /dev/null
}

pipe_dwi_preprocessing()
{
  log "preprocessing DWI"

  run_dwidenoise ${OUT_BASE_DIR}/dwi.mif \
    ${OUT_BASE_DIR}/dwi_denoised.mif
  
  run_degibbs ${OUT_BASE_DIR}/dwi_denoised.mif \
    ${OUT_BASE_DIR}/dwi_denoised_degibbs.mif

  ### QC check ###
  run_qc_residual ${OUT_BASE_DIR}/dwi.mif \
    ${OUT_BASE_DIR}/dwi_denoised.mif \
    ${OUT_BASE_DIR}/dwi_denoised_residuals.mif \
    ${SUB_ID}_dwi_denoised_residuals
    

  run_qc_residual {OUT_BASE_DIR}/dwi_denoised.mif \
    ${OUT_BASE_DIR}/dwi_denoised_degibbs.mif \
    ${OUT_BASE_DIR}/dwi_denoised_degibbs_residuals.mif \
    ${SUB_ID}_dwi_denoised_degibbs_residuals
}

pipe_rpe_preprocessing()
{
  ### preprocess rpe_b0, if available (scenario 2) ###
  if [[ -n "${RPE_B0_NII}" ]]; then
    log "preprocessing RPE B0"
    run_degibbs "${OUT_BASE_DIR}/rpe_b0_dwi.mif" \
      "${OUT_BASE_DIR}/rpe_b0_dwi_degibbs.mif"
  fi

  ### preprocess rpe_dwi, if available (scenario 3) ###
  if [[ -n "${RPE_DWI_NII}" ]]; then
    log "preprocessing RPE DWI"

    run_dwidenoise "${OUT_BASE_DIR}/rpe_dwi.mif" \
      "${OUT_BASE_DIR}/rpe_dwi_denoised.mif"
    
    run_degibbs "${OUT_BASE_DIR}/rpe_dwi_denoised.mif" \
      "${OUT_BASE_DIR}/rpe_dwi_denoised_degibbs.mif"
  fi

}

pipe_dwipreproc_smart()
{
  local input=${OUT_BASE_DIR}/dwi_denoised_degibbs.mif
  local output=${OUT_BASE_DIR}/dwi_denoised_degibbs_eddy.mif

  if [[ -n "${RPE_DWI_NII}" ]]; then
    # scenario 3
    echo "TODO: implement scenario 3"
  elif [[ -n "${RPE_B0_NII}" ]]; then
    # scenario 2
    log "Running dwifslpreproc for DWI RPE B0 acquistion (scenario 2)"
    run_if_missing "${output}" \
      dwifslpreproc ${input} ${output} \
        -rpe_header \
        -se_epi ${OUT_BASE_DIR}/rpe_b0_dwi_degibbs.mif -align_seepi \
        -eddy_options "--slm=linear --repol --data_is_shelled --verbose --estimate_move_by_susceptibility" \
        -eddyqc_all ${OUT_BASE_DIR}/eddyqc_dir \
        -info \
        -scratch ${OUT_BASE_DIR}/scratch \
        -nocleanup \
        -nthreads "${THREADS}" \
        -force

      #TODO FIX scratch dir 
  else
    # scenario 1
    log "Running dwifslpreproc for DWI no RPI acquisition (scenario 1)"
    run_if_missing ${output} \
      dwifslpreproc ${input} ${output} \
        -rpe_header \
        -eddy_options "--slm=linear --repol --data_is_shelled --verbose" \
        -eddyqc_all ${OUT_BASE_DIR}/eddyqc_dir \
        -info \
        -scratch ${OUT_BASE_DIR}/scratch \
        -nocleanup \
        -nthreads "${THREADS}" \
        -force
  fi
}

pipe_bias_correct()
{
  local input=${OUT_BASE_DIR}/dwi_denoised_degibbs_eddy.mif
  local output=${OUT_BASE_DIR}/dwi_denoised_degibbs_eddy_bias.mif

  run_if_missing "${output}" \
    dwibiascorrect ants "${input}" "${output}" \
    -nthreads "${THREADS}"
}

pipe_upsample()
{
  local input=${OUT_BASE_DIR}/dwi_denoised_degibbs_eddy_bias.mif
  local output=${OUT_BASE_DIR}/dwi_denoised_degibbs_eddy_bias_upsample.mif
  
  run_if_missing "${output}" \
    mrgrid "${input}" \
      regrid -voxel 1.25 "${output}"\
      -interp sinc -force -nthreads "${THREADS}" 
}

pipe_tensor_fit()
{
  local input="${OUT_BASE_DIR}/dwi_denoised_degibbs_eddy_bias_upsample.mif"
  local output_dir="${OUT_BASE_DIR}/tensor_fit_upsample"

  mkdir -p "${output_dir}"

  local dwi_nii="${output_dir}/dwi_upsampled.nii.gz"
  local bvec="${output_dir}/dwi_upsampled.bvecs"
  local bval="${output_dir}/dwi_upsampled.bvals"
  local mrtrix_grad="${output_dir}/dwi_upsampled_grad_table"

  ### convert .mif to .nii.gz and export gradient files ###
  run_if_missing "${dwi_nii}" \
    mrconvert "${input}" "${dwi_nii}" \
      -export_grad_fsl "${bvec}" "${bval}" \
      -export_grad_mrtrix "${mrtrix_grad}" \
      -nthreads "${THREADS}" -info


  
  bet "${dwi_nii}"  "${output_dir}"/dwi_upsampled_mask.nii.gz -f 0.3

  ### run DTI fitting ###
  run_if_missing "${output_dir}/dti_FA.nii.gz" \
    dtifit \
      --data="${dwi_nii}" \
      --out="${output_dir}/dti" \
      --mask="${output_dir}"/dwi_upsampled_mask.nii.gz \
      --bvecs="${bvec}" \
      --bvals="${bval}" \
      --save_tensor
}

#-------------------------------------------------------------------------------
### MAIN
#-------------------------------------------------------------------------------

main() 
{
  setup_environment
  log "Starting DTI pipeline for ${SUB_ID}"

  ### if no primary DTI is set, try to detect it ###
  if [[ -z "${PRIMARY_DTI_NII}" ]]; then
    log "Primary DTI not set: auto-detecting..."
    detect_dti_files
  fi

  ### prep for preprocessing ###
  #verify_minimum_required_inputs

  ### start pipeline steps ###
  #pipe_mrconvert

  ### run dwi preprocessing ###
  #pipe_dwi_preprocessing

  ## run rpe preprocessing (runs only when rpe data is detected) ###
  #pipe_rpe_preprocessing

  ### run core dwi preprocessing ###
  #pipe_dwipreproc_smart  

  ### run bias correction ###
  #pipe_bias_correct 

  ### run upsampling ###
  #pipe_upsample

  ### run tensor fitting ###
  #pipe_tensor_fit
  

}

main "$@"

#-------------------------------------------------------------------------------
