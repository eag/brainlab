#!/bin/bash

#-------------------------------------------------------------------------------
### REQUIREMENTS ###
#-------------------------------------------------------------------------------

# BLT_CONTAINER_DIR defined (synthseg.sif)
# apptainer/singularity

#-------------------------------------------------------------------------------
### SETUP ###
#-------------------------------------------------------------------------------

### script variables ###
num_threads=8;

### data variables ###
root_dir="${SCRATCH}"
in_dir="${root_dir}/organized"
out_dir="${root_dir}/derivatives/synthseg"
t1_fn="T1.nii.gz"
fl_fn=""

#-------------------------------------------------------------------------------
### CONFIG ###
#-------------------------------------------------------------------------------

### standard variables ###
list_dir=${out_dir}/lists
log_dir=${out_dir}/logs
list_fn=${list_dir}/subject_list.txt
synthseg_sif="${BLT_CONTAINER_DIR}/synthseg.sif"

### path to required software ###
if [[ -z "${MODULEPATH}" ]]; then
 echo "using apptainer/singularity on path"
else
  module --force purge
  module load StdEnv/2023
  module load apptainer/1.3.4
fi

### use apptainer, or singularity if apptainer is not available ###
if command -v apptainer &> /dev/null; then
  container_tool=apptainer
elif command -v singularity &> /dev/null; then
  container_tool=singularity
else
  echo "ERROR: neither apptainer nor singularity found in PATH."
  exit 1
fi

### ensure BLT_CONTAINER_DIR defined ###
if [[ -z "${BLT_CONTAINER_DIR}" ]]; then
  echo "ERROR: BLT_CONTAINER_DIR not set"
  exit 1
fi

### ensure synthseg.sif exists ###
if [[ ! -f ${synthseg_sif} ]]; then
  echo "ERROR: ${synthseg_sif} not found"
  exit 1
fi


#-------------------------------------------------------------------------------
### FUNCTIONS ###
#-------------------------------------------------------------------------------

function prep_dir
{
  echo "Preparing directories"

  mkdir -p ${list_dir}
  mkdir -p ${out_dir}

  rm -f ${list_fn}
  $(cd ${in_dir}; ls -d * | grep -Ev "lists" | grep -Ev "logs" > ${list_fn})
  while read -r line; do
    sub_id=$(echo ${line} | cut -d'/' -f1)
    mkdir -p ${out_dir}/${sub_id}
  done < ${list_fn}  
}
 
function run_synthseg
{
  if [[ -f ${in_dir}/${sub_id}/${t1_fn} ]]; then  
    ${container_tool} run --cleanenv --contain --pwd / ${synthseg_sif} \
      --i ${in_dir}/${sub_id}/${t1_fn} \
      --o ${out_dir}/${sub_id}/T1_synthseg.nii.gz \
      --threads ${num_threads} 
  fi

  if [[ -f ${in_dir}/${sub_id}/${fl_fn} ]]; then  
    ${container_tool} run --cleanenv --contain --pwd / ${synthseg_sif} \
      --i ${in_dir}/${sub_id}/${fl_fn} \
      --o ${out_dir}/${sub_id}/FLAIR_synthseg.nii.gz \
      --threads ${num_threads} 
  fi
}


#-------------------------------------------------------------------------------
### PROCESSING ###
#-------------------------------------------------------------------------------

if [[ $# -eq 0 ]]; then
  prep_dir
elif [[ $# -eq 1 ]]; then

  ### get subject ID from the list ###
  idx=$1
  sub_id=$(cat ${list_fn} | head -n ${idx} | tail -n 1)
  
  ### run container for subject ID ###
  run_synthseg

fi

#-------------------------------------------------------------------------------



